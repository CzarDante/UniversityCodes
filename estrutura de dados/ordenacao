void insertionsort(long long int * vet, long long int tam)
{
    long long int i,j,aux;

    for(i=1;i<tam;i++)
    {
        aux = vet[i];
        for(j=i-1;j>=0 && vet[j]>aux;j--)
        {
            vet[j+1] = vet[j];
        }
        vet[j+1] = aux;
    }
}
//log(n);

void selectionsort(long long int * vet, long long int tam)
{
    long long int i,j,ind_menor,aux;

    for(i=0;i<tam-1;i++)
    {
        ind_menor = i;
        for(j=i+1;j<tam;j++)
        {
            if (vet[j]<vet[ind_menor])
            {
                ind_menor = j;
            }
        }
        aux = vet[i];
        vet[i] = vet[ind_menor];
        vet[ind_menor] = aux;
    }
}
//n^2

void bubblesort(long long int *vet, long long int tam)
{
    long long int pass, i, aux;
    int trocou = 1;

    for (pass = 0; pass < tam - 1 && trocou; pass++)
    {
        trocou = 0;
        for (i = 0; i < tam - 1 - pass; i++)
        {
            if (vet[i] > vet[i + 1])
            {
                trocou = 1;
                aux = vet[i];
                vet[i] = vet[i + 1];
                vet[i + 1] = aux;
            }
        }
    }
}

void quickSort(long long int *vet, long long int inicio, long long int fim) 
{
    if (inicio>=fim)
    {
        return;
    }

    long long int pivo,aux,aux_troca;

    pivo = inicio;
    aux = fim;

    while(pivo!=aux)
    {
        if (pivo<aux)
        {
            if (vet[pivo]>vet[aux])
            {
                aux_troca = vet[pivo];
                vet[pivo] = vet[aux];
                vet[aux] = aux_troca;
                aux_troca = pivo;
                pivo = aux;
                aux = aux_troca;
            }
        } 
        else
        {
            if (vet[pivo]<vet[aux])
            {
                aux_troca = vet[pivo];
                vet[pivo] = vet[aux];
                vet[aux] = aux_troca;
                aux_troca = pivo;
                pivo = aux;
                aux = aux_troca;
            }

        }

        if (pivo<aux)
        {
            aux --;
        }
        else
        {
            aux ++;
        }
    }

    quicksort(vet,inicio,pivo-1);
    quicksort(vet,pivo+1,fim);

}